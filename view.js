// ==================================================// Class Definition: Expens// ==================================================function Expense(id, date, item, text, money) {	this.id = id;	this.date = date;	this.item = item;	this.text = text;	this.money = new Number(money);    this.written_order = new Number(this.date.getDate()) + new Number(this.id);}Expense.prototype.toString = function() {    var text = "<p id='" + this.id + "'>(" + this.item + ") " + this.text + " " + this.money     + " <input id='delete' type='button' value='삭제' onclick='delete_node("+this.id+")'; />"+ "</p>";    return text;}// ==================================================// Global varialbles// ==================================================var entries = new Array(); // xml문서 내용을 담는 배열// Date.toString 함수 재정의Date.prototype.toString = function() {    return this.getFullYear() + "-" + (this.getMonth() + 1) + "-" + this.getDate();}// ==================================================// Functions// ==================================================window.onload = function() {    loadXml();}// xml 문서 호출function loadXml() {	httpReq = new XMLHttpRequest();    if (!httpReq) {        alert('XMLHttpRequest() error');        exit;    }    httpReq.abort(); // kill the previous request    var url = getXmlFilename() + "?dummy=" + new Date().getTime(); // to override cach    httpReq.open("get", url, true);    httpReq.send();    httpReq.onreadystatechange = function() {        if (httpReq.readyState == 4 && httpReq.status == 200) {            // xml 문서 -> array로 저장            var entry = httpReq.responseXML.getElementsByTagName("entry"); // xml 문서            for (var i = 0; i < entry.length; i++) {                var date_string = getText(entry[i].getElementsByTagName("date")[0]).split('-');                var year = date_string[0];                var month = date_string[1];                var date = date_string[2];                entries.push( new Expense(                    getText(entry[i].getElementsByTagName("id")[0]),                    new Date(year, month, date),                    getText(entry[i].getElementsByTagName("item")[0]),                    getText(entry[i].getElementsByTagName("text")[0]),                    getText(entry[i].getElementsByTagName("money")[0]))                );            }            // 최근 시간순으로 array 정렬            entries.sort(function(a, b){return b.written_order - a.written_order;});            // 총액 출력            totalAmount();            // array에 저장된 정보를 html 문서로 변환            loadRecentText();        } // end of if    } // end of function()}function totalAmount() {    var sum = 0;    for (var i = 0; i < entries.length; i++) {        sum += entries[i].money;    }    document.getElementById("total_amount").innerHTML = "총지출: " + sum + "원";}// array에 저장된 정보를 html 문서로 변환function loadRecentText() {    var contents_elem = document.getElementById("contents"); // html element    contents_elem.innerHTML = "";    var recent_date = entries[0].date.getDate(); // 최신 날짜        for (var i = 0; i < entries.length; i++) {        if (entries[i].date.getDate() != recent_date) {// 최신 날짜가 아니면 break            break;        }        if ((i == 0) || (i > 0 && entries[i].date.getDate() != entries[i - 1].date.getDate())){             // 날짜가 변경될 경우: 날짜 출력				            contents_elem.innerHTML += "<h4>" + entries[i].date + "</h4>";        }        contents_elem.innerHTML += entries[i]; // (항목) 내용, 금액 출력    }}// 더보기 버튼 이벤트 핸들러// array에 저장된 정보를 html 문서로 변환 function loadText() {    var contents_elem = document.getElementById("contents"); // html element    var recent_date = entries[0].date.getDate(); // 최신 날짜       for (var i = 0; i < entries.length; i++) {        if (entries[i].date.getDate() == recent_date) // 최신 날짜는 스킵 (이미 출력했으므로)            continue;        if ((i == 0) || (i > 0 && entries[i].date.getDate() != entries[i - 1].date.getDate())){             // 날짜가 변경될 경우: 날짜 출력				            contents_elem.innerHTML += "<h4>" + entries[i].date + "</h4>";        }        contents_elem.innerHTML += entries[i]; // (항목) 내용, 금액 출력    }    // 버보기 버튼 제거    document.getElementById("morebtn").innerHTML = "";}// element 로 부터 nodeValue 얻어내는 함수// 없으면 "" 반환function getText(elem) {    var text = "";    if (elem) {        if (elem.childNodes) {            var child = elem.childNodes[0];            if (child && child.nodeValue) text = child.nodeValue;        }    }    return text;}// 노드 삭제하기function delete_node(delete_id) {    var response = confirm("Delete?");        if (response) {        httpReq = new XMLHttpRequest();        if (!httpReq) {            alert('XMLHttpRequest() error');            exit;        }        httpReq.abort(); // kill the previous request        httpReq.open("post", "delete.php", true);        httpReq.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=euc-kr");        var url = "delete_id=" + delete_id + "&filename=" + getXmlFilename() +"&dummy=" + (new Date).getTime();        httpReq.send(url);                      httpReq.onreadystatechange = function() {                   // write.php 정상 호출될 경우            if (httpReq.readyState == 4 && httpReq.status == 200) {                // 배열에서 삭제                var delete_date;                for (var i = 0; i < entries.length; i++) {                    if (entries[i].id == delete_id) {                        delete_date = entries[i].date.getDate(); // 삭제된 항목의 날짜 구하기                        entries.remove(i);                     }                }                // 화면 표시에서 삭제                document.getElementById(delete_id).innerHTML = "";                // 만약 해당 날짜의 데이터가 모두 삭제된 경우: 날짜 출력도 삭제함                // 변경된 총 지출액 출력                totalAmount();            }                   }    } }Array.prototype.remove = function(from, to) {    var rest = this.slice((to || from) + 1 || this.length);    this.length = from < 0 ? this.length + from : from;    return this.push.apply(this, rest);};